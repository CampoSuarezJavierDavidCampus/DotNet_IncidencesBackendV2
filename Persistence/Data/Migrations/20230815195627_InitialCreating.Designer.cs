// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiIncidencesContext))]
    [Migration("20230815195627_InitialCreating")]
    partial class InitialCreating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("IdCity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("idCiudad");

                    b.Property<int>("IdDepartmentFk")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("idDepFk");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombreCiudad");

                    b.HasKey("IdCity");

                    b.HasIndex("IdDepartmentFk");

                    b.ToTable("ciudad", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.Property<int>("IdClassroom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSalon");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capasidadSalon");

                    b.Property<string>("NameClassroom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombreSalon");

                    b.HasKey("IdClassroom");

                    b.ToTable("salon", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("idPais");

                    b.Property<string>("NameCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombrePais");

                    b.HasKey("IdCountry");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("idDep");

                    b.Property<int>("IdCountryFk")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("idPaisFk");

                    b.Property<string>("NameDepartment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombreDep");

                    b.HasKey("IdDepartment");

                    b.HasIndex("IdCountryFk");

                    b.ToTable("departamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<int>("IdGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGenero");

                    b.Property<string>("NameGender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombreGenero");

                    b.HasKey("IdGender");

                    b.ToTable("genero", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inscription", b =>
                {
                    b.Property<int>("IdInscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMatricula");

                    b.Property<int>("IdClassroomFk")
                        .HasColumnType("int")
                        .HasColumnName("idSalonFk");

                    b.Property<string>("IdPersonFk")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idPersonaFk");

                    b.HasKey("IdInscription");

                    b.HasIndex("IdClassroomFk");

                    b.HasIndex("IdPersonFk");

                    b.ToTable("matricula", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<string>("IdPerson")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idPersona");

                    b.Property<int>("IdCityFk")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("idCiudadFk");

                    b.Property<int>("IdGenderFk")
                        .HasColumnType("int")
                        .HasColumnName("idGeneroFk");

                    b.Property<int>("IdPersonTypeFk")
                        .HasColumnType("int")
                        .HasColumnName("idTipoPersonaFk");

                    b.Property<string>("NamePerson")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombrePersona");

                    b.HasKey("IdPerson");

                    b.HasIndex("IdCityFk");

                    b.HasIndex("IdGenderFk");

                    b.HasIndex("IdPersonTypeFk");

                    b.ToTable("persona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PersonType", b =>
                {
                    b.Property<int>("IdPersonType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoPersona");

                    b.Property<string>("DescriptionPersonType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcionTipoPersona");

                    b.HasKey("IdPersonType");

                    b.ToTable("tipoPersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TrainerClassroom", b =>
                {
                    b.Property<int>("IdClassroomFk")
                        .HasColumnType("int")
                        .HasColumnName("idSalonFk");

                    b.Property<string>("IdPerTrainerFk")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idPerTrainerFk");

                    b.HasKey("IdClassroomFk", "IdPerTrainerFk");

                    b.HasIndex("IdPerTrainerFk");

                    b.ToTable("trainerSalon", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Cities")
                        .HasForeignKey("IdDepartmentFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Departments")
                        .HasForeignKey("IdCountryFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Inscription", b =>
                {
                    b.HasOne("Domain.Entities.Classroom", "Classroom")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IdClassroomFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IdPersonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Persons")
                        .HasForeignKey("IdCityFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("IdGenderFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PersonType", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("IdPersonTypeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("Domain.Entities.TrainerClassroom", b =>
                {
                    b.HasOne("Domain.Entities.Classroom", "Classroom")
                        .WithMany("TrainerClassrooms")
                        .HasForeignKey("IdClassroomFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("TrainerClassrooms")
                        .HasForeignKey("IdPerTrainerFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.Navigation("Inscriptions");

                    b.Navigation("TrainerClassrooms");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Inscriptions");

                    b.Navigation("TrainerClassrooms");
                });

            modelBuilder.Entity("Domain.Entities.PersonType", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
